plugins {
    id 'io.freefair.lombok' version '6.6'
    id 'jacoco'
    id 'application'
    id 'java-library'
//    id("maven-publish")
}

group = "com.tyutyutyu.oo4j"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    implementation platform(project(":oo4j-platform"))

    implementation("com.google.guava:guava")
    implementation("com.oracle.database.jdbc:ojdbc11")
    implementation("com.oracle.database.nls:orai18n")
    implementation("org.freemarker:freemarker")
    implementation("org.slf4j:slf4j-api")
    implementation("org.springframework:spring-core")
    implementation("org.springframework:spring-jdbc")
    implementation("info.picocli:picocli")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl")

    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.testcontainers:oracle-xe")

    compileOnly("info.picocli:picocli-codegen")
}

tasks.test {
    useJUnitPlatform()
    maxHeapSize = "1G"
    finalizedBy(tasks.jacocoTestReport)
    testLogging.showStandardStreams = true
    reports {
        junitXml.required = true
    }
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

application {
    mainClass.set("com.tyutyutyu.oo4j.core.Oo4jCli")
}

java.sourceCompatibility = JavaVersion.VERSION_11

//publishing {
//    publications.create<MavenPublication>("maven") {
//        from(components["java"])
//    }
//}

task fatJar(type: Jar) {
    archiveFileName.set("${project.name}-fat.jar")
    manifest {
        attributes["Implementation-Title"] = "OO4J"
        attributes["Implementation-Version"] = archiveVersion.get()
        attributes["Main-Class"] = "com.tyutyutyu.oo4j.core.Oo4jCli"
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}